const { Telegraf, Markup } = require('telegraf');
const path = require('path');
const fs = require('fs');
require("dotenv").config();
const express = require('express');
const { MainText, Instruction1, Instruction2, urlJet, urlMines } = require('./function');

const app = express();
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const VERCEL_URL = process.env.VERCEL_URL;

const bot = new Telegraf(BOT_TOKEN);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const checkUserTGId = (userId) => {
    const ids = fs.readFileSync(path.join(__dirname, 'telegramId.txt'), 'utf-8').split('\n');
    return ids.includes(userId.toString().trim());
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
const webhookUrl = `${VERCEL_URL}/${BOT_TOKEN}`;
bot.telegram.setWebhook(webhookUrl)
    .then(() => {
        console.log(`–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', err);
    });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
app.post(`/${BOT_TOKEN}`, (req, res) => {
    bot.handleUpdate(req.body);
    res.sendStatus(200);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.start((ctx) => MainText(ctx));

bot.action('main', (ctx) => MainText(ctx));
bot.action('jet', (ctx) => sendGameInfo(ctx, 'jet'));
bot.action('mines', (ctx) => sendGameInfo(ctx, 'mines'));
bot.action('instruction1', (ctx) => Instruction1(ctx));
bot.action('instruction2', (ctx) => Instruction2(ctx));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–µ
function sendGameInfo(ctx, gameType) {
    const imagePath = path.join(__dirname, 'images', gameType === 'jet' ? 'jetTg.jpg' : 'intro_mines.jpg');
    const gameName = gameType === 'jet' ? 'ABUZ LuckyJet' : 'ABUZ Mines';
    const url = gameType === 'jet' ? urlJet : urlMines;
    
    ctx.replyWithPhoto({ source: imagePath })
        .then(() => {
            return ctx.replyWithHTML(
                `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤</b> üî∏ <b>${gameName}</b> üî∏!\n\n` +
                'üöÄ <i>–≠—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win.</i>\n\n' +
                'üéØ –í–∞—à–∞ —Ü–µ–ª—å: –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –æ—Ç–≥–∞–¥–∞—Ç—å, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—å—Å—è <b>–∑–≤–µ–∑–¥–æ—á–∫–∏</b>, –∞ –Ω–µ –º–∏–Ω—ã üöÄ\n\n' +
                'ü§ñ –ù–∞—à –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ <b>ChatGPT-4</b>!\n\n' +
                '‚úÖ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</b>\n' +
                '1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>.\n' +
                '2. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–¥–µ–ª–æ–º <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b> –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!',
                Markup.inlineKeyboard([
                    [Markup.button.url('üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', url)],
                    [Markup.button.callback('üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', gameType === 'jet' ? 'instruction1' : 'instruction2')],
                    [Markup.button.callback('üöÄ –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª üöÄ', `signal${gameType.charAt(0).toUpperCase() + gameType.slice(1)}`)]
                ])
            );
        });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
let isWaitingForReferral = false;

bot.action('check_registr', (ctx) => {
    ctx.replyWithPhoto({ source: path.join(__dirname, 'images', 'idWin.jpg') })
        .then(() => ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"))
        .then(() => { isWaitingForReferral = true; })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', err);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', (ctx) => {
    if (!isWaitingForReferral) return;

    const userMessage = ctx.message.text.trim();
    const telegramId = ctx.from.id;

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –≤ —Ñ–∞–π–ª
    fs.appendFileSync(path.join(__dirname, 'ref.txt'), `${userMessage}\n`);
    fs.appendFileSync(path.join(__dirname, 'telegramId.txt'), `${telegramId}\n`);

    ctx.reply('–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!', Markup.inlineKeyboard([
        [Markup.button.callback('üöÄ –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª LuckyJet üöÄ', 'signalJet')],
        [Markup.button.callback('üöÄ –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª Mines üöÄ', 'signalMines')]
    ]));

    isWaitingForReferral = false; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
const signalMessages = {};

bot.action('signalJet', async (ctx) => handleSignal(ctx, 'jet'));
bot.action('signalMines', async (ctx) => handleSignal(ctx, 'mines'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async function handleSignal(ctx, gameType) {
    const userId = ctx.from.id;

    if (!checkUserTGId(userId)) {
        return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.', Markup.inlineKeyboard([
            [Markup.button.url('üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', gameType === 'jet' ? urlJet : urlMines)],
            [Markup.button.callback('üîô –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'check_registr')]
        ]));
    }

    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (signalMessages[userId]) {
            await ctx.deleteMessage(signalMessages[userId]);
        }

        const loadingMessage = await ctx.reply('–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        await ctx.deleteMessage(loadingMessage.message_id);

        const randomImagePath = getRandomImagePath(gameType);
        const randomNumber = Math.floor(Math.random() * (999999 - 500000 + 1)) + 500000;
        const randomChange = Math.floor(Math.random() * (99 - 75 + 1)) + 75;

        const newSignalMessage = await ctx.replyWithPhoto(
            { source: randomImagePath },
            { caption: `Game ‚Ññ ${randomNumber} \nChance: ${randomChange}%` }
        );

        signalMessages[userId] = newSignalMessage.message_id;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getRandomImagePath(gameType) {
    const imagesDir = path.join(__dirname, `images/${gameType === 'jet' ? 'jetSignal' : 'MinesSignal'}`);
    const files = fs.readdirSync(imagesDir);
    const randomFile = files[Math.floor(Math.random() * files.length)];
    return path.join(imagesDir, randomFile);
}

// –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
module.exports = app;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
module.exports = app;


// bot.help((ctx) => ctx.reply('Send me a sticker'))
// bot.on(message('sticker'), (ctx) => ctx.reply('üëç'))
// bot.hears('hi', (ctx) => ctx.reply('Hey there'))
// botRef.launch();



// // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç–µ

// bot.launch(
// );
// // Enable graceful stop
// process.once('SIGINT', () => bot.stop('SIGINT'))
// process.once('SIGTERM', () => bot.stop('SIGTERM'))


